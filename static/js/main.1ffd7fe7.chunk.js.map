{"version":3,"sources":["components/header/Header.js","components/cityForm/CityForm.js","actions/restaurantActions.js","actions/actionTypes.js","components/restaurants/Restaurants.js","reducers/restaurantReducer.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["Header","data-testid","Component","CityForm","props","handleChange","e","a","this","setState","city","target","value","getCity","state","bind","htmlFor","type","id","placeholder","onChange","connect","restaurants","dispatch","payload","Restaurants","handleClick","fetchRestaurants","filter","substr","filteredRestaurants","cityRestaurants","restaurant","address","toLowerCase","indexOf","map","className","key","name","price","onClick","search","updateSearch","items","fetch","then","res","json","data","initialState","middleware","thunk","store","createStore","action","compose","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ffd7fe7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n          <header>\r\n            <h1 data-testid=\"mainHeading\">Restaurants in your City</h1>\r\n          </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getCity } from './../../actions/restaurantActions';\r\n\r\nclass CityForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            city: ''\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange = async function(e){\r\n        await this.setState({\r\n            city: e.target.value\r\n        })\r\n        this.props.getCity(this.state.city)\r\n\r\n        // setTimeout(() => this.setState({\r\n        //     city: ''\r\n        // }), 5000)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <label htmlFor=\"city\">City: </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"city\"\r\n              value={this.state.city}\r\n              placeholder=\"Enter City name\"\r\n              onChange={this.handleChange}\r\n              data-testid=\"yourCity\"\r\n            />\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nCityForm.propTypes = {\r\n    getCity: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => {if(state.restaurants){\r\n    return({\r\n        city: state.restaurants.city\r\n    })\r\n} else {\r\n    return {\r\n        city: ''\r\n    }\r\n}}\r\n\r\nexport default connect(mapStateToProps, { getCity })(CityForm);","import { GET_CITY, FETCH_RESTAURANTS } from './actionTypes';\r\n\r\nexport const getCity = (city) => (dispatch) => {\r\n    dispatch({\r\n        type: GET_CITY,\r\n        payload: city\r\n    })\r\n};\r\n\r\nexport const fetchRestaurants = (city) => (dispatch) => {\r\n    fetch(`http://opentable.herokuapp.com/api/restaurants?city=${city}`)\r\n      .then((res) => res.json())\r\n      .then((data) =>\r\n        dispatch({\r\n          type: FETCH_RESTAURANTS,\r\n          payload: data.restaurants\r\n        })\r\n      );\r\n}","export const FETCH_RESTAURANTS = 'FETCH_RESTAURANTS';\r\nexport const GET_CITY = 'GET_CITY';","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { fetchRestaurants } from './../../actions/restaurantActions';\r\n\r\n\r\nclass Restaurants extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filter: \"\"\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    this.props.fetchRestaurants(this.props.city);\r\n  };\r\n\r\n  updateSearch(e) {\r\n    this.setState({\r\n      filter: e.target.value.substr(0, 15),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let filteredRestaurants, cityRestaurants;\r\n\r\n    if (this.props.restaurants) {\r\n      filteredRestaurants = this.props.restaurants.filter((restaurant) => {\r\n        return (\r\n          restaurant.address\r\n            .toLowerCase()\r\n            .indexOf(this.state.filter.toLowerCase()) !== -1\r\n        );\r\n      });\r\n    }\r\n\r\n    if (filteredRestaurants) {\r\n      cityRestaurants = filteredRestaurants.map((restaurant) => (\r\n        <div className=\"restaurantDetails\" key={restaurant.id}>\r\n          <h3 className=\"restaurantName\" data-testid=\"name\">\r\n            Name: {restaurant.name}\r\n          </h3>\r\n          <p className=\"restaurantAddress\" data-testid=\"address\">\r\n            Address: {restaurant.address}\r\n          </p>\r\n          <p className=\"restaurantPrice\" data-testid=\"price\">\r\n            Price: {restaurant.price}\r\n          </p>\r\n        </div>\r\n      ));\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"findButton\"\r\n          data-testid=\"findButton\"\r\n          onClick={(e) => this.handleClick(e)}\r\n        >\r\n          Find Restaurants\r\n        </button>\r\n        <br />\r\n        <hr />\r\n        <label htmlFor=\"filterRestaurants\">Filter: </label>\r\n        <input\r\n          id=\"filterRestaurants\"\r\n          className=\"searchInput\"\r\n          type=\"text\"\r\n          placeholder=\"Filter by address\"\r\n          value={this.state.search}\r\n          onChange={this.updateSearch.bind(this)}\r\n          data-testid=\"filterInput\"\r\n        />\r\n\r\n        <div className=\"restaurantList\" data-testid=\"restaurantList\">\r\n          {cityRestaurants}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRestaurants.propTypes = {\r\n    fetchRestaurants: PropTypes.func.isRequired,\r\n    restaurants: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  if (state.items) {\r\n    return {\r\n      city: state.city,\r\n      restaurants: state.items,\r\n    };\r\n  } else {\r\n    return {\r\n      city: state.city,\r\n      restaurants: [],\r\n    };\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchRestaurants })(Restaurants);","import { GET_CITY, FETCH_RESTAURANTS } from './../actions/actionTypes';\r\n\r\nexport const initialState = {\r\n    city: '',\r\n    items: []\r\n}\r\n\r\nexport function rootReducer(state = initialState, action) {\r\n         switch (action.type) {\r\n           case GET_CITY:\r\n             return {\r\n               ...state,\r\n               city: action.payload,\r\n             };\r\n\r\n            case FETCH_RESTAURANTS:\r\n                return {\r\n                    ...state,\r\n                    items: action.payload\r\n                }\r\n\r\n           default:\r\n             return state;\r\n         }\r\n}","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './../reducers/restaurantReducer';\r\n\r\nconst state = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  state,\r\n    compose(\r\n      applyMiddleware(...middleware)\r\n    )\r\n);\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\nimport './App.css';\n\nimport { Provider } from 'react-redux';\n\nimport Header from './components/header/Header'\nimport CityForm from './components/cityForm/CityForm';\nimport Restaurants from './components/restaurants/Restaurants';\nimport store from './store/store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App wrapper\">\n        <Header />\n        <main>\n          <CityForm />\n          <Restaurants />\n        </main>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}